html,
body {
	margin: 0;
	padding: 0;
	scroll-behavior: smooth;
}
body {
	background: #fff !important;
	color: $primaryBlue;
}

* {
	box-sizing: border-box;
}

.row {
	@include make-row();

	> * {
		@include make-col-ready();
		padding-right: 1.5rem;
		padding-left: 1.5rem;
	}
}

@include make-grid-columns();

.row,
.row-full {
	display: flex;
	flex-wrap: wrap;
	flex-direction: row;
	padding: 0;
}

.row {
	width: 190rem;
	max-width: 100%;
	margin-left: auto;
	margin-right: auto;
}

.row-full {
	max-width: 100%;
}

.col {
	flex-shrink: 0;
	max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid

	> * {
		flex-shrink: 0;
	}
}

.column-100 {
	flex: 0 0 calc(100% - 50px);
}
.column-50 {
	flex: 0 0 calc(50% - 50px);
}

.d-flex {
	display: flex;
	> * {
		flex-shrink: 0;
	}
}

$utilities: () !default;

$utilities: map-merge(
	(
		// Margin utilities
		// scss-docs-start utils-spacing
		"margin":
			(
				responsive: true,
				property: margin,
				class: m,
				values:
					map-merge(
						$spacers,
						(
							auto: auto
						)
					)
			),
		"margin-x": (
			responsive: true,
			property: margin-right margin-left,
			class: mx,
			values:
				map-merge(
					$spacers,
					(
						auto: auto
					)
				)
		),
		"margin-y": (
			responsive: true,
			property: margin-top margin-bottom,
			class: my,
			values:
				map-merge(
					$spacers,
					(
						auto: auto
					)
				)
		),
		"margin-top": (
			responsive: true,
			property: margin-top,
			class: mt,
			values:
				map-merge(
					$spacers,
					(
						auto: auto
					)
				)
		),
		"margin-end": (
			responsive: true,
			property: margin-right,
			class: me,
			values:
				map-merge(
					$spacers,
					(
						auto: auto
					)
				)
		),
		"margin-bottom": (
			responsive: true,
			property: margin-bottom,
			class: mb,
			values:
				map-merge(
					$spacers,
					(
						auto: auto
					)
				)
		),
		"margin-start": (
			responsive: true,
			property: margin-left,
			class: ms,
			values:
				map-merge(
					$spacers,
					(
						auto: auto
					)
				)
		),
		// Padding utilities
		"padding":
			(
				responsive: true,
				property: padding,
				class: p,
				values: $spacers
			),
		"padding-x": (
			responsive: true,
			property: padding-right padding-left,
			class: px,
			values: $spacers
		),
		"padding-y": (
			responsive: true,
			property: padding-top padding-bottom,
			class: py,
			values: $spacers
		),
		"padding-top": (
			responsive: true,
			property: padding-top,
			class: pt,
			values: $spacers
		),
		"padding-end": (
			responsive: true,
			property: padding-right,
			class: pe,
			values: $spacers
		),
		"padding-bottom": (
			responsive: true,
			property: padding-bottom,
			class: pb,
			values: $spacers
		),
		"padding-start": (
			responsive: true,
			property: padding-left,
			class: ps,
			values: $spacers
		),
		"display": (
			responsive: true,
			print: true,
			property: display,
			class: d,
			values: inline inline-block block grid table table-row table-cell
				flex inline-flex none
		),
		// Flex utilities
		// scss-docs-start utils-flex
		"flex":
			(
				responsive: true,
				property: flex,
				values: (
					fill: 1 1 auto
				)
			),
		"flex-direction": (
			responsive: true,
			property: flex-direction,
			class: flex,
			values: row column row-reverse column-reverse
		),
		"flex-grow": (
			responsive: true,
			property: flex-grow,
			class: flex,
			values: (
				grow-0: 0,
				grow-1: 1
			)
		),
		"flex-shrink": (
			responsive: true,
			property: flex-shrink,
			class: flex,
			values: (
				shrink-0: 0,
				shrink-1: 1
			)
		),
		"flex-wrap": (
			responsive: true,
			property: flex-wrap,
			class: flex,
			values: wrap nowrap wrap-reverse
		),
		"gap": (
			responsive: true,
			property: gap,
			class: gap,
			values: $spacers
		),
		"justify-content": (
			responsive: true,
			property: justify-content,
			values: (
				start: flex-start,
				end: flex-end,
				center: center,
				between: space-between,
				around: space-around,
				evenly: space-evenly
			)
		),
		"align-items": (
			responsive: true,
			property: align-items,
			values: (
				start: flex-start,
				end: flex-end,
				center: center,
				baseline: baseline,
				stretch: stretch
			)
		),
		"align-content": (
			responsive: true,
			property: align-content,
			values: (
				start: flex-start,
				end: flex-end,
				center: center,
				between: space-between,
				around: space-around,
				stretch: stretch
			)
		),
		"align-self": (
			responsive: true,
			property: align-self,
			values: (
				auto: auto,
				start: flex-start,
				end: flex-end,
				center: center,
				baseline: baseline,
				stretch: stretch
			)
		),
		"order": (
			responsive: true,
			property: order,
			values: (
				first: -1,
				0: 0,
				1: 1,
				2: 2,
				3: 3,
				4: 4,
				5: 5,
				last: 6
			)
		),
		// scss-docs-end utils-flex
	),
	$utilities
);

ul li {
	display: block;
}

.sticky {
	top: 0;
	position: sticky;
	height: 100%;
}

.snipcart-modal__container {
	box-shadow: 0 0 99px 0 $primaryBlue !important;
}

.snipcart-layout {
	min-height: calc(100% - $headerHeight) !important;
	height: calc(100% - $headerHeight) !important;
}

.snipcart-layout__content--side {
	padding-bottom: 100px !important;
}

.snipcart-base-button {
	height: auto !important;
}

.snipcart-cart-header button {
	&:hover {
		background-color: transparent;
		border: none;
		color: inherit;
	}
}
.snipcart-checkout__content {
	input {
		height: auto;
		border-radius: none;
		border: none;
	}
}