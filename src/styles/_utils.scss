.no-scrollbar {
	/* Use this rule for firefox, to hide the scrollbar */
	scrollbar-width: none;
	overflow: auto;
	/* this will hide the scrollbar in mozilla based browsers */
	overflow: -moz-scrollbars-none;
	/* this will hide the scrollbar in internet explorers */
	-ms-overflow-style: none;

	&::-webkit-scrollbar {
		width: 0 !important;
		display: none;
	}
}

// Utility generator
// Used to generate utilities & print utilities
@mixin generate-utility($utility, $infix, $is-rfs-media-query: false) {
	$values: map-get($utility, values);

	// If the values are a list or string, convert it into a map
	@if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
		$values: zip($values, $values);
	}

	@each $key, $value in $values {
		$properties: map-get($utility, property);

		// Multiple properties are possible, for example with vertical or horizontal margins or paddings
		@if type-of($properties) == "string" {
			$properties: append((), $properties);
		}

		// Use custom class if present
		$property-class: if(
			map-has-key($utility, class),
			map-get($utility, class),
			nth($properties, 1)
		);
		$property-class: if($property-class == null, "", $property-class);

		// State params to generate pseudo-classes
		$state: if(map-has-key($utility, state), map-get($utility, state), ());

		$infix: if(
			$property-class == "" and str-slice($infix, 1, 1) == "-",
			str-slice($infix, 2),
			$infix
		);

		// Don't prefix if value key is null (eg. with shadow class)
		$property-class-modifier: if(
			$key,
			if($property-class == "" and $infix == "", "", "-") + $key,
			""
		);

		@if map-get($utility, rfs) {
			// Inside the media query
			@if $is-rfs-media-query {
				$val: rfs-value($value);

				// Do not render anything if fluid and non fluid values are the same
				$value: if($val == rfs-fluid-value($value), null, $val);
			} @else {
				$value: rfs-fluid-value($value);
			}
		}

		$is-rtl: map-get($utility, rtl);

		@if $value != null {
			@if $is-rtl == false {
				/* rtl:begin:remove */
			}
			.#{$property-class + $infix + $property-class-modifier} {
				@each $property in $properties {
					#{$property}: $value!important;
				}
			}

			@each $pseudo in $state {
				.#{$property-class
					+ $infix
					+ $property-class-modifier}-#{$pseudo}:#{$pseudo} {
					@each $property in $properties {
						#{$property}: $value !important
					}
				}
			}
			@if $is-rtl == false {
				/* rtl:end:remove */
			}
		}
	}
}

// Loop over each breakpoint
@each $breakpoint in map-keys($grid-breakpoints) {
	// Generate media query if needed
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		// Loop over each utility property
		@each $key, $utility in $utilities {
			// The utility can be disabled with `false`, thus check if the utility is a map first
			// Only proceed if responsive media queries are enabled or if it's the base media query
			@if type-of($utility) ==
				"map" and
				(map-get($utility, responsive) or $infix == "")
			{
				@include generate-utility($utility, $infix);
			}
		}
	}
}

.border-bottom-thick {
	border-bottom: 3px solid;
	padding-bottom: 0.2em;
}

.mt-45 {
	margin-top: 2.2rem;
}

figure.fixed-ratio {

	aspect-ratio: 3/2;

	@supports not (aspect-ratio: 3 / 2) {
		padding-top: 66%;
		position: relative;

		img {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
		}
	}
	
	img {
		height: 100%;
		object-fit: cover;
	}
}

.overflow-hidden {
	overflow: hidden;
}

.main-wrapper.overflow-hidden {
	height: 100vh;
}


.widget .newInput-label, .widget .newInput-labelVoucher {
	font-family: $sansFont;
}

.gatsby-image-wrapper img {
	height: auto !important;
}

.aligncenter {
	display: block;
	margin: 0 auto;
}
